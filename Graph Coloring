#include <stdio.h>
#include <stdbool.h>

#define V 4 // Number of vertices in the graph

// Function to check if it's safe to color vertex v with color c
bool isSafe(int graph[V][V], int color[], int v, int c) {
    for (int i = 0; i < V; i++) {
        // If adjacent vertices have the same color, it's not safe
        if (graph[v][i] == 1 && color[i] == c) {
            return false;
        }
    }
    return true;
}

// Function to solve the graph coloring problem using backtracking
bool graphColoring(int graph[V][V], int m, int color[], int v) {
    // If all vertices are colored, return true
    if (v == V) {
        return true;
    }

    // Try different colors for vertex v
    for (int c = 1; c <= m; c++) {
        // Check if it's safe to color vertex v with color c
        if (isSafe(graph, color, v, c)) {
            color[v] = c; // Assign color c to vertex v

            // Recur to assign colors to the remaining vertices
            if (graphColoring(graph, m, color, v + 1)) {
                return true;
            }

            // If assigning color c doesn't lead to a solution, backtrack
            color[v] = 0;
        }
    }

    return false; // No color can be assigned, return false
}

int main() {
    int graph[V][V] = {
        {0, 1, 1, 1},
        {1, 0, 1, 0},
        {1, 1, 0, 1},
        {1, 0, 1, 0}
    };
    int m = 3; // Number of colors
    int color[V] = {0}; // Array to store the color assignment for vertices

    // Check if the graph can be colored with m colors
    if (graphColoring(graph, m, color, 0)) {
        printf("Solution exists with %d colors:\n", m);
        for (int i = 0; i < V; i++) {
            printf("Vertex %d -> Color %d\n", i + 1, color[i]);
        }
    } else {
        printf("Solution does not exist with %d colors\n", m);
    }

    return 0;
}
