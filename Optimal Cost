#include <stdio.h>
#include <limits.h>

// Function to find the minimum number of multiplications needed to multiply matrices
int matrixChainOrder(int p[], int n) {
    int m[n][n];

    // m[i, j] represents the minimum number of scalar multiplications needed to multiply matrices Ai...Aj
    for (int i = 1; i < n; i++) {
        m[i][i] = 0;  // No multiplication needed for a single matrix
    }

    // Chain length l varies from 2 to n
    for (int l = 2; l < n; l++) {
        for (int i = 1; i < n - l + 1; i++) {
            int j = i + l - 1;
            m[i][j] = INT_MAX;

            // Try all possible positions to split the product
            for (int k = i; k <= j - 1; k++) {
                int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < m[i][j]) {
                    m[i][j] = q;
                }
            }
        }
    }

    return m[1][n - 1];  // The result is in m[1][n-1]
}

int main() {
    int n;

    // Input number of matrices (n-1) matrices are defined by n dimensions
    printf("Enter the number of matrices: ");
    scanf("%d", &n);

    int p[n + 1];  // Array to store matrix dimensions
    printf("Enter the dimensions of matrices: \n");
    for (int i = 0; i <= n; i++) {
        scanf("%d", &p[i]);
    }

    // Function call to get the optimal cost
    int result = matrixChainOrder(p, n + 1);
    printf("Minimum number of multiplications needed: %d\n", result);

    return 0;
}
