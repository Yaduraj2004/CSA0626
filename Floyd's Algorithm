#include <stdio.h>
#include <limits.h>

#define INF INT_MAX
#define MAX_VERTICES 10

// Function to perform Floyd-Warshall algorithm
void floydWarshall(int n, int dist[MAX_VERTICES][MAX_VERTICES]) {
    // Apply Floyd-Warshall algorithm
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][k] != INF && dist[k][j] != INF) {
                    if (dist[i][j] > dist[i][k] + dist[k][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
    }
}

// Function to print the shortest path matrix
void printSolution(int n, int dist[MAX_VERTICES][MAX_VERTICES]) {
    printf("Shortest distances between every pair of vertices:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (dist[i][j] == INF) {
                printf("INF ");
            } else {
                printf("%d ", dist[i][j]);
            }
        }
        printf("\n");
    }
}

int main() {
    int n;

    // Input number of vertices
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    int dist[MAX_VERTICES][MAX_VERTICES];

    // Initialize the distance matrix with infinity where no edge exists
    printf("Enter the distance matrix (enter %d for no path between vertices):\n", INF);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) {
                dist[i][j] = 0;  // The distance from a vertex to itself is 0
            } else {
                scanf("%d", &dist[i][j]);
                if (dist[i][j] == -1) {
                    dist[i][j] = INF;  // Represent no path with INF
                }
            }
        }
    }

    // Perform the Floyd-Warshall algorithm
    floydWarshall(n, dist);

    // Print the shortest path matrix
    printSolution(n, dist);

    return 0;
}
