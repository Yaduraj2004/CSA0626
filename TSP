#include <stdio.h>
#include <limits.h>

#define MAX_CITIES 16  // Maximum number of cities (adjustable)

// Function to find the minimum cost of the TSP problem using DP with Bitmasking
int tsp(int n, int dist[n][n], int dp[1 << n][n], int mask, int pos) {
    // If all cities have been visited, return to the starting city (0)
    if (mask == (1 << n) - 1) {
        return dist[pos][0];  // Return to the start
    }

    // If this subproblem has already been solved, return the result
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }

    // Initialize the result to a large value
    int ans = INT_MAX;

    // Try to go to every other city from the current city
    for (int city = 0; city < n; city++) {
        // Check if the city has not been visited yet (i.e., city is not in the mask)
        if ((mask & (1 << city)) == 0) {
            // Recurse to find the minimum cost by visiting the new city
            int newAns = dist[pos][city] + tsp(n, dist, dp, mask | (1 << city), city);
            ans = (ans < newAns) ? ans : newAns;  // Take the minimum
        }
    }

    // Store and return the result of this subproblem
    dp[mask][pos] = ans;
    return ans;
}

int main() {
    int n;

    // Input number of cities
    printf("Enter number of cities: ");
    scanf("%d", &n);

    int dist[n][n];
    printf("Enter the distance matrix:\n");

    // Input the distance matrix (n x n)
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &dist[i][j]);
        }
    }

    // DP table initialized to -1 (indicating uncalculated subproblems)
    int dp[1 << n][n];
    for (int i = 0; i < (1 << n); i++) {
        for (int j = 0; j < n; j++) {
            dp[i][j] = -1;
        }
    }

    // Start the TSP function from city 0 with only city 0 visited
    int result = tsp(n, dist, dp, 1, 0);

    printf("The minimum cost of the tour is: %d\n", result);

    return 0;
}
