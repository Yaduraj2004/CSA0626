#include <stdio.h>
#include <stdbool.h>

#define N 8  // Define the size of the chessboard (can be changed)

// Function to print the solution board
void printSolution(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

// Function to check if a queen can be placed on board[row][col]
// This is checked for the column and diagonals
bool isSafe(int board[N][N], int row, int col) {
    // Check the column for any queen in the same column
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 1) {
            return false;
        }
    }

    // Check the upper left diagonal for any queen
    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // Check the upper right diagonal for any queen
    for (int i = row - 1, j = col + 1; i >= 0 && j < N; i--, j++) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    return true;
}

// Function to solve the N-Queens problem using backtracking
bool solveNQueens(int board[N][N], int row) {
    // Base case: If all queens are placed, return true
    if (row == N) {
        return true;
    }

    // Try placing a queen in each column one by one
    for (int col = 0; col < N; col++) {
        // Check if it's safe to place the queen at [row][col]
        if (isSafe(board, row, col)) {
            // Place the queen
            board[row][col] = 1;

            // Recursively place queens in the next row
            if (solveNQueens(board, row + 1)) {
                return true;
            }

            // If placing queen in [row][col] doesn't lead to a solution, backtrack
            board[row][col] = 0;
        }
    }

    // If no column can lead to a solution, return false
    return false;
}

int main() {
    int board[N][N] = {0}; // Initialize the board with 0 (no queen placed)

    // Try to solve the N-Queens problem
    if (solveNQueens(board, 0)) {
        printf("Solution to the N-Queens problem is:\n");
        printSolution(board);
    } else {
        printf("Solution does not exist.\n");
    }

    return 0;
}
